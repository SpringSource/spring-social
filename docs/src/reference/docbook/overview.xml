<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="overview"
    xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Spring Social Overview</title>

  <section id="overview-introduction">
    <title>Introduction</title>
    <para>The Spring Social project enables your applications to establish Connections with Software-as-a-Service (SaaS) Providers such as Facebook and Twitter to invoke APIs on behalf of Users.</para>
  </section>
  
  <section id="overview-social">
      <title>Socializing applications</title>
      
      <para>The phrase "social networking" often refers to efforts aimed at bringing people together. In the software world, those efforts take the form of online social networks such as Facebook, Twitter, and LinkedIn. Roughly half a billion of this world's internet users have flocked to these services to keep frequent contact with family, friends, and colleagues.</para>
      
      <para>Under the surface, however, these services are just software applications that gather, store, and process information. Just like so many applications written before, these social networks have users who sign in and perform some activity offered by the service.</para>
      
      <para>What makes these applications a little different than traditional applications is that the data that they collect represent some facet of their users' lives. What's more, these applications are more than willing to share that data with other applications, as long as the user gives permission to do so. This means that although these social networks are great at bringing people together, as software services they also excel at bringing applications together.</para>

      <para>To illustrate, imagine that Paul is a member of an online movie club. A function of the movie club application is to recommend movies for its members to watch and to let its members maintain a list of movies that they have seen and those that they plan to see. When Paul sees a movie, he signs into the movie club site, checks the movie off of his viewing list, and indicates if he liked the movie or not. Based on his responses, the movie club application can tailor future recommendations for Paul to see.</para>
      
      <para>On its own, the movie club provides great value to Paul, as it helps him choose movies to watch. But Paul is also a Facebook user. And many of Paul's Facebook friends also enjoy a good movie now and then. If Paul were able to connect his movie club account with his Facebook profile, the movie club application could offer him a richer experience. Perhaps when he sees a movie, the application could post a message on his Facebook wall indicating so. Or when offering suggestions, the movie club could factor in the movies that his Facebook friends liked.</para>
      
      <para>Social integration is a three-way conversation between a service provider, a service consumer, and a user who holds an account on both the provider and consumer. All interactions between the consumer and the service provider are scoped to the context of the user's profile on the service provider.</para>
          
      <para>In the narrative above, Facebook is the service provider, the movie club application is the service consumer, and Paul is the user of both. The movie club application may interact with Facebook on behalf of Paul, accessing whatever Facebook data and functionality that Paul permits, including seeing Paul's list of friends and posting messages to his Facebook wall.</para>
      
      <para>From the user's perspective, both applications provide some valuable functionality. But by connecting the user's account on the consumer application with his account on the provider application, the user brings together two applications that can now offer the user more value than they could individually.</para>
      
      <para>With Spring Social, your application can play the part of the service consumer, interacting with a service provider on behalf of its users. The key features of Spring Social are:</para>
      
      <itemizedlist>
          <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with service providers.</para></listitem>
          <listitem><para>A "Connect Controller" that handles the OAuth exchange between a service provider, consumer, and user in a web application environment.</para></listitem>
          <listitem><para>Java bindings to popular service provider APIs including Facebook, Twitter, LinkedIn, TripIt, GitHub, and Gowalla.</para></listitem>
          <listitem><para>A "Signin Controller" that allows users to authenticate with your application by signing in with their Provider accounts, such as their Twitter or Facebook accounts.</para></listitem>
      </itemizedlist>
  </section>
  
  <section id="overview-howtoget">
      <title>How to get</title>

      <para>Spring Social is divided into the modules described in <xref linkend="table-spring-social-modules"/>.</para>
      
      <table xml:id="table-spring-social-modules">
        <title>Spring Social Modules</title>
        <tgroup cols="2">
          <colspec align="left" />
          <colspec colnum="1" colname="col1" colwidth="2*"/>
          <colspec colnum="2" colname="col2" colwidth="2*"/>
          <thead>
            <row>
              <entry align="center">Name</entry>
              <entry align="center">Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>spring-social-core</entry>
              <entry>Spring Social's Connect Framework and OAuth client support.</entry>
            </row>
            <row>
              <entry>spring-social-web</entry>
              <entry>Spring Social's <classname>ConnectController</classname> which uses the Connect Framework to manage connections in a web application environment.</entry>
            </row>
            <row>
              <entry>spring-social-facebook</entry>
              <entry>Spring Social's Facebook API binding</entry>
            </row>
            <row>
              <entry>spring-social-twitter</entry>
              <entry>Spring Social's Twitter API binding.</entry>
            </row>
            <row>
              <entry>spring-social-linkedin</entry>
              <entry>Spring Social's LinkedIn API binding.</entry>
            </row>
            <row>
              <entry>spring-social-github</entry>
              <entry>Spring Social's GitHub API binding.</entry>
            </row>
            <row>
              <entry>spring-social-gowalla</entry>
              <entry>Spring Social's Gowalla API binding.</entry>
            </row>
            <row>
              <entry>spring-social-tripit</entry>
              <entry>Spring Social's TripIt API binding.</entry>
            </row>
            <row>
              <entry>spring-social-test</entry>
              <entry>Support for testing Connect implementations and API bindings.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      
      <para>Which of these modules your application needs will largely depend on what facets of Spring Social you intend to use. At very minimum, you'll need the core module in your application's classpath:</para>
      
      <programlisting language="xml"><![CDATA[
<dependency>
  <groupId>org.springframework.social</groupId>
  <artifactId>spring-social-core</artifactId>
  <version>${org.springframework.social-version}</version>
</dependency>]]>
	  </programlisting>
	  	  
	  <para>To let Spring Social handle the back-and-forth authorization handshake between a web application and a service provider, you'll need the web module:</para>
	  
    <programlisting language="xml"><![CDATA[
<dependency>
  <groupId>org.springframework.social</groupId>
  <artifactId>spring-social-web</artifactId>
  <version>${org.springframework.social-version}</version>
</dependency>]]>
	  </programlisting>
      	  
	  <para>The remaining modules are elective, depending on which of the supported service providers you intend for your application to interact with. For example, you'll only need the GitHub module if your application needs to invoke the Github API:</para>
	  
		<para>
			If you are developing against a milestone version, such as 1.0.0.M3, you will need to add the following repository in order to resolve the artifact:
		</para>
		<programlisting language="xml"><![CDATA[
<repository>
  <id>org.springframework.maven.milestone</id>
  <name>Spring Maven Milestone Repository</name>
  <url>http://maven.springframework.org/milestone</url>
</repository>]]>
		</programlisting>		
		<para>
			If you are testing out the latest nightly build version (e.g. 1.0.0.BUILD-SNAPSHOT), you will need to add the following repository:
		</para>
		<programlisting language="xml"><![CDATA[
<repository>
  <id>org.springframework.maven.snapshot</id>
  <name>Spring Maven Snapshot Repository</name>
  <url>http://maven.springframework.org/snapshot</url>
</repository>]]>
		</programlisting>
		
		<section id="overview-dependencies">
			<title>Dependencies</title>
			
			<para>
				In addition to Spring Social itself, there are a few additional dependencies you may need to add to your project's build.
			</para>
			
			<section id="overview-dependencies-spring">
				<title>Spring Framework</title>
				<para>
					Spring Social depends on the Spring Framework's web module for its REST client support using <classname>RestTemplate</classname>.
					If Spring 3.1 is available, Spring Social will take advantage of some new features in Spring 3.1.
					However, Spring Social does not depend on these new features and will work with Spring 3.0.3 or higher.
				</para>
				
				<para>
					If you want to use Spring Social with Spring 3.0.3 or higher, you'll need to explicitly add the spring-web dependency to your build, specifying the version:
				</para>
				
			    <programlisting language="xml"><![CDATA[
<dependency>
  <groupId>org.springframework</groupId>
  <artifactId>spring-web</artifactId>
  <version>3.0.5.RELEASE</version>
</dependency>]]>
	  			</programlisting>
	  			
	  			<para>
	  				Maven's dependency management favors "nearest" dependencies, so your project's dependency on a specific version of spring-web will override Spring Social's dependency on the 3.1 version.
  				</para>
  				
  				<para>
	  				Gradle, on the other hand, favors the newest dependency.
	  				If you're using Gradle to build your project, you'll need to also set the dependency's <code>force</code> property to <code>true</code> to force Gradle to resolve your chosen version of Spring:
	  			</para>

			    <programlisting language="java"><![CDATA[
dependencies { 
	compile ("org.springframework.social:spring-social-core:1.0.0.M3")
	compile ("org.springframework:spring-web:3.0.3.RELEASE") { force=true }
}]]>
	  			</programlisting>

			</section>

			<section id="overview-dependencies-springsecurity">
				<title>Spring Security</title>

				<para>
					If you're using Spring Social's JDBC-based connection repository, it will require a <interfacename>TextEncryptor</interfacename> from Spring Security 3.1.0 to encrypt connection data as it is persisted.
					For that, you'll need to add the core module from Spring Security 3.1.0 to your project build:
				</para>

		    	<programlisting language="xml"><![CDATA[
<dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-core</artifactId>
  <version>3.1.0.RC2</version>
</dependency>]]>
	  			</programlisting>

  			</section>

			<section id="overview-dependencies-commonscodec">
				<title>Commons Codec</title>

				<para>
					When using Spring Social to integrate with OAuth 1-based providers, you'll need to add the Commons Codec library to your project:
				</para>
			
		    	<programlisting language="xml"><![CDATA[
<dependency>
  <groupId>commons-codec</groupId>
  <artifactId>commons-codec</artifactId>
  <version>1.5</version>
</dependency>]]>
	  			</programlisting>
	  			
  			</section>

			<section id="overview-dependencies-httpcomponents">
				<title>Apache HttpComponents</title>
				
				<para>
					Spring Social has an optional dependency on Apache's HttpComponents HttpClient as the basis for creating requests when communicating with a service provider.
					If the HttpComponents HttpClient library is present, it will favor it. 
					Otherwise, it will fall back on standard Java facilities for request creation.
				</para>

		    	<programlisting language="xml"><![CDATA[
<dependency>
  <groupId>org.apache.httpcomponents</groupId>
  <artifactId>httpclient</artifactId>
  <version>4.1.1</version>
</dependency>]]>
	  			</programlisting>
								
				<para>
					Although shown here to depende on version 4.1.1 of the HttpClient library, Spring Social can also with with 4.0.X versions of HttpClient.
				</para>
			</section>

			<section id="overview-dependencies-jackson">
				<title>Jackson JSON Processor</title>

				<para>
					Spring Social's API binding implementations rely on the Jackson JSON processor to deserialize JSON responses into Java model objects.
					Each of the provider modules transitively depend on Jackson 1.8.0, so there's nothing special to do to add Jackson to your project's Maven or Gradle build. 
				</para>

  			</section>

		</section>	  
  </section>
</chapter>