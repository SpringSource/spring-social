<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="apis" xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>Working with Service Provider APIs</title>
  
	<section xml:id="section_api_introduction">
		<title>Introduction</title>
      
		<para>
			After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. 
			Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application.
		</para>
      
		<para>
			Each service provider exposes their data and functionality through an API. 
			Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface.
		</para>
      
		<para>
			Spring Social comes with six provider API templates/operations for the following service providers:
		</para>
      
		<itemizedlist>
			<listitem><para>Twitter</para></listitem>
			<listitem><para>Facebook</para></listitem>
			<listitem><para>LinkedIn</para></listitem>
			<listitem><para>TripIt</para></listitem>
			<listitem><para>GitHub</para></listitem>
			<listitem><para>Gowalla</para></listitem>
		</itemizedlist>
	</section>
  
	<section xml:id="section_api_twitter">
		<title>Twitter</title>
        
		<para>
			From a user's perspective, Twitter's function is rather simple: Enable users to post whatever they're thinking, 140 characters at a time.
			In contrast, Twitter's API is rather rich, enabling applications to interact with Twitter in ways that may not be obvious from the humble tweet box.
			Spring Social offers interaction with Twitter's service API through the <interfacename>Twitter</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>.			
		</para>

		<para>
			Creating an instance of <classname>TwitterTemplate</classname> involves invoking its constructor, passing in the application's OAuth credentials and an access token/secret pair authorizing the application to act on a user's behalf. 
			For example:
		</para>
		
		<programlisting language="java"><![CDATA[
String consumerKey = "..."; // The application's consumer key
String consumerSecret = "..."; // The application's consumer secret
String accessToken = "..."; // The access token granted after OAuth authorization
String accessTokenSecret = "..."; // The access token secret granted after OAuth authorization
Twitter twitter = new TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>
		</programlisting>
		
		<para>
			In addition, <classname>TwitterTemplate</classname> has a default constructor that creates an instance without any OAuth credentials:
		</para>
		
		<programlisting language="java"><![CDATA[
Twitter twitter = new TwitterTemplate();]]>
		</programlisting>
		
		<para>
			When constructed with the default constructor, <classname>TwitterTemplate</classname> will allow a few simple operations that do not require authorization, such as searching. 
			Attempting other operations, such as tweeting will fail with an <classname>IllegalStateException</classname> being thrown.
		</para>
		
		<para>
			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>Twitter</interfacename> via a <interfacename>Connection</interfacename>. 
			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>Twitter</interfacename>:
		</para>				
		
		<programlisting language="java"><![CDATA[
Connection<Twitter> connection = connectionRepository.findPrimaryConnectionToApi(Twitter.class);
Twitter twitter = connection.getApi();]]>
		</programlisting>
		
		<para>
			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Twitter.
			From that connection, it retrieves a <interfacename>Twitter</interfacename> instance that is configured with the connection details received when the connection was first established.
		</para>
		
		<para>
			Once you have a <interfacename>Twitter</interfacename>, you can perform a several operations against Twitter.
			<interfacename>Twitter</interfacename> is defined as follows:
		</para>
		
		<programlisting language="java"><![CDATA[
public interface Twitter {

    boolean isAuthorizedForUser();

    DirectMessageOperations directMessageOperations();
	
    FriendOperations friendOperations();

    ListOperations listOperations();

    SearchOperations searchOperations();

    TimelineOperations timelineOperations();

    UserOperations userOperations();

}]]>
		</programlisting>		
		
		<para>
			The <methodname>isAuthorizedForUser</methodname> helps determine if the <interfacename>Twitter</interfacename> instance has been created with credentials to perform on behalf of a user.
			It will return true if it is capable of performing operations requiring authorization; false otherwise. 			
		</para>
		
		<para>
			The remaining six methods return sub-APIs, partitioning the Twitter service API into divisions targeting specific facets of Twitter functionality.
			These sub-APIs are defined by interfaces described in <xref linkend="table-twitter-sub-apis" />.
		</para>
		
		<table xml:id="table-twitter-sub-apis">
			<title>Twitter's Sub-APIs</title>
			<tgroup cols="2">
				<colspec align="left" />
				<colspec colnum="1" colname="col1" colwidth="2*"/>
				<colspec colnum="2" colname="col2" colwidth="2*"/>
				<thead>
					<row>
						<entry align="center">Sub-API Interface</entry>
						<entry align="center">Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>DirectMessageOperations</entry>
						<entry>Reading and sending direct messages.</entry>
					</row>
					<row>
						<entry>FriendOperations</entry>
						<entry>Retrieving a user's list of friends and followers and following/unfollowing users.</entry>
					</row>
					<row>
						<entry>ListOperations</entry>
						<entry>Maintaining, subscribing to, and unsubscripting from user lists</entry>
					</row>
					<row>
						<entry>SearchOperations</entry>
						<entry>Searching tweets and viewing search trends</entry>
					</row>
					<row>
						<entry>TimelineOperations</entry>
						<entry>Reading timelines and posting tweets.</entry>
					</row>
					<row>
						<entry>UserOperations</entry>
						<entry>Retrieving user profile data.</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		
		<para>
			What follows is a survey of common tasks you may perform with <interfacename>Twitter</interfacename> and its sub-APIs.
			For complete details on the Spring Social's entire Twitter API binding, refer to the JavaDoc.
		</para>

		<section id="twitter-getProfile">
			<title>Retrieving a user's Twitter profile data</title>
			
			<para>
				To get a user's Twitter profile, call <interfacename>UserOperations</interfacename>' <methodname>getUserProfile()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
TwitterProfile profile = twitter.userOperations().getUserProfile();]]>
			</programlisting>
			
			<para>
				This returns a <classname>TwitterProfile</classname> object containing profile data for the authenticated user. 
				This profile information includes the user's Twitter screen name, their name, location, description, and the date that they created their Twitter account. 
				Also included is a URL to their profile image.
			</para>
			
			<para>
				If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
TwitterProfile profile = twitter.userOperations().getUserProfile("habuma");]]>
			</programlisting>
			
			<para>
				If all you need is the screen name for the authenticating user, then call <methodname>UserOperations.getScreenName()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
String profileId = twitter.userOperations().getScreenName();]]>
			</programlisting>

		</section>

		<section id="twitter-status">
			<title>Tweeting</title>
			
			<para>
				To post a message to Twitter the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method provided by <interfacename>TimelineOperations</interfacename>:
			</para>
			
			<programlisting language="java"><![CDATA[
twitter.timelineOperations().updateStatus("Spring Social is awesome!")]]>
			</programlisting>
			
			<para>
				Optionally, you may also include metadata about the tweet, such as the location (latitude and longitude) you are tweeting from. 
				For that, pass in a <classname>StatusDetails</classname> object, setting the location property:
			</para>
			
			<programlisting language="java"><![CDATA[
StatusDetails statusDetails = new StatusDetails().setLocation(51.502f, -0.126f);
twitter.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>
			</programlisting>
			
			<para>
				To have Twitter display the location in a map (on the Twitter web site) then you should also set the <code>displayCoordinates</code> property to <code>true</code>:
			</para>
			
			<programlisting language="java"><![CDATA[
StatusDetails statusDetails = new StatusDetails().setLocation(51.502f, -0.126f).setDisplayCoordinates(true);
twitter.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>
			</programlisting>
			
			
			<para>
				If you'd like to retweet another tweet (perhaps one found while searching or reading the Twitter timeline), call the <methodname>retweet()</methodname> method, passing in the ID of the tweet to be retweeted:
			</para>
			
			<programlisting language="java"><![CDATA[
long tweetId = tweet.getId();
twitter.timelineOperations().retweet(tweetId);]]>
			</programlisting>
			
			<para>
				Note that Twitter disallows repeated tweets. 
				Attempting to tweet or retweet the same message multiple times will result in a <classname>DuplicateTweetException</classname> being thrown.
			</para>
		</section>

		<section id="twitter-timelines">
			<title>Reading Twitter timelines</title> <!-- and mentions -->
			
			<para>
				From a Twitter user's perspective, Twitter organizes tweets into four different timelines:
			</para>
			
			<itemizedlist>
				<listitem><para>User - Includes tweets posted by the user.</para></listitem>
				<listitem><para>Friends - Includes tweets from the user's timeline and the timeline of anyone that they follow, with the exception of any retweets.</para></listitem>
				<listitem><para>Home - Includes tweets from the user's timeline and the timeline of anyone that they follow.</para></listitem>
				<listitem><para>Public - Includes tweets from all Twitter users.</para></listitem>
			</itemizedlist>
			
			<para>
				To be clear, the only difference between the home timeline and the friends timeline is that the friends timeline excludes retweets.
			</para>
			
			<para>
				<interfacename>TimelineOperations</interfacename> also supports reading of tweets from one of the available Twitter timelines. 
				To retrieve the 20 most recent tweets from the public timeline, use the <methodname>getPublicTimeline()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getPublicTimeline();]]>
			</programlisting>
			
			<para>
				<methodname>getHomeTimeline()</methodname> retrieves the 20 most recent tweets from the user's home timeline:
			</para>
			
			<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getHomeTimeline();]]>
			</programlisting>
			
			<para>
				Similarly, <methodname>getFriendsTimeline()</methodname> retrieves the 20 most recent tweets from the user's friends timeline:
			</para>
			
			<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getFriendsTimeline();]]>
			</programlisting>
			
			<para>
				To get tweets from the authenticating user's own timeline, call the <methodname>getUserTimeline()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getUserTimeline();]]>
			</programlisting>
			
			<para>
				If you'd like to retrieve the 20 most recent tweets from a specific user's timeline (not necessarily the authenticating user's timeline), pass the user's screen name in as a parameter to <methodname>getUserTimeline()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getUserTimeline("rclarkson");]]>
			</programlisting>
			
			<para>
				In addition to the four Twitter timelines, you may also want to get a list of tweets mentioning the user. 
				The <methodname>getMentions()</methodname> method returns the 20 most recent tweets that mention the authenticating user:
			</para>
			
			<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getMentions();]]>
			</programlisting>
			
		</section>

		<section id="twitter-friends">
			<title>Friends and Followers</title>
			
			<para>
				A key social concept in Twitter is the ability for one user to "follow" another user.
				The followed user's tweets will appear in the following user's home and friends timelines.
				To follow a user on behalf of the authenticating user, call the <interfacename>FriendOperations</interfacename>' <methodname>follow()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
twitter.friendOperations().follow("habuma");]]>
			</programlisting>

			<para>
				Similarly, you may stop following a user using the <methodname>unfollow()</methodname> method:
			</para>

			<programlisting language="java"><![CDATA[
twitter.friendOperations().unfollow("habuma");]]>
			</programlisting>
			
			<para>
				If you want to see who a particular user is following, use the <methodname>getFriends()</methodname> method:
			</para>

			<programlisting language="java"><![CDATA[
List<TwitterProfile> friends = twitter.friendOperations().getFriends("habuma");]]>
			</programlisting>

			<para>
				On the other hand, you may be interested in seeing who is following a given user.
				In that case the <methodname>getFollowers()</methodname> method may be useful:
			</para>

			<programlisting language="java"><![CDATA[
List<TwitterProfile> followers = twitter.friendOperations().getFollowers("habuma");]]>
			</programlisting>
		</section>
		
		<section id="twitter-lists">
			<title>Twitter User Lists</title>
			
			<para>
				In addition to following other users, Twitter provides the ability for users to collect users in lists, regardless of whether or not they are being followed.
				These lists may be private to the use who created them or may be public for others to read and subscribe to.
			</para>
			
			<para>
				To create a new list, use <interfacename>ListOperations</interfacename>' <methodname>createList()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
UserList familyList = twitter.listOperations().createList(
        "My Family", "Tweets from my immediate family members", false);]]>
			</programlisting>
			
			<para>
				<methodname>createList()</methodname> takes three parameters and returns a <classname>UserList</classname> object representing the newly created list.
				The first parameter is the name of the list.
				The second parameter is a brief description of the list.
				The final parameter is a boolean indicating whether or not the list is public.
				Here, false indicates that the list should be private.
				
			</para>
			
			<para>
				Once the list is created, you may add members to the list by calling the <methodname>addToList()</methodname> method:
			</para>

			<programlisting language="java"><![CDATA[
twitter.listOperations().addToList(familyList.getSlug(), "artnames");]]>
			</programlisting>
			
			<para>
				The first parameter given to <methodname>addToList()</methodname> is the list slug (which is readily available from the <classname>UserList</classname> object).
				The second parameter is the screen name of a user to add to the list.
			</para>
			
			<para>
				To remove a member from a list, pass the same parameters to <methodname>removedFromList()</methodname>:
			</para>

			<programlisting language="java"><![CDATA[
twitter.listOperations().removeFromList(familyList.getSlug(), "artnames");]]>
			</programlisting>


			<para>
				You can also subscribe to a list on behalf of the authenticating user.
				Subscribing to a list has the effect of including tweets from the list's members in the user's home timeline.
				The <methodname>subscribe()</methodname> method is used to subscribe to a list:
			</para>

			<programlisting language="java"><![CDATA[
twitter.listOperations().subscribe("habuma", "music");]]>
			</programlisting>			
			
			<para>
				Here, <methodname>subscribe()</methodname> is given the list owner's screen name ("habuma") and the list slug ("music").
			</para>
			
			<para>
				Similarly, you may unsubscribe from a list with the <methodname>unsubscribe()</methodname> method:
			</para>

			<programlisting language="java"><![CDATA[
twitter.listOperations().unsubscribe("habuma", "music");]]>
			</programlisting>			
		</section>		

		<section id="twitter-search">
			<title>Searching Twitter</title>
			
			<para>
				<interfacename>SearchOperations</interfacename> enables you to search the public timeline for tweets containing some text through its <methodname>search()</methodname> method.
			</para>
			
			<para>
				For example, to search for tweets containing "#spring":
			</para>
			
			<programlisting language="java"><![CDATA[
SearchResults results = twitter.searchOperations().search("#spring");]]>
			</programlisting>
			
			<para>
				The <methodname>search()</methodname> method will return a <classname>SearchResults</classname> object that includes a list of 50 most recent matching tweets as well as some metadata concerning the result set. 
				The metadata includes the maximum tweet ID in the search results list as well as the ID of a tweet that precedes the resulting tweets. 
				The <code>sinceId</code> and <code>maxId</code> properties effectively define the boundaries of the result set. 
				Additionally, there's a boolean <code>lastPage</code> property that, if <code>true</code>, indicates that this result set is the page of results.
			</para>
			
			<para>
				To gain better control over the paging of results, you may choose to pass in the page and results per page to <methodname>search()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
SearchResults results = twitter.searchOperations().search("#spring", 2, 10);]]>
			</programlisting>
			
			<para>
				Here, we're asking for the 2nd page of results where the pages have 10 tweets per page.
			</para>
			
			<para>
				Finally, if you'd like to confine the bounds of the search results to fit between two tweet IDs, you may pass in the since and maximum tweet ID values to <methodname>search()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
SearchResults results = twitter.searchOperations().search("#spring", 2, 10, 145962, 210112);]]>
			</programlisting>
			
			<para>
				This ensures that the result set will not contain any tweets posted before the tweet whose ID is 146962 nor any tweets posted after the tweet whose ID is 210112.
			</para>
		</section>

		<section id="twitter-directMessages">
			<title>Sending and receiving direct messages</title>
			
			<para>
				In addition to posting tweets to the public timelines, Twitter also supports sending of private messages directly to a given user. 
				<classname>DirectMessageOperations</classname>' <methodname>sendDirectMessage()</methodname> method can be used to send a direct message to another user:
			</para>
			
			<programlisting language="java"><![CDATA[
twitter.directMessageOperations().sendDirectMessage("kdonald", "You going to the Dolphins game?")]]>
			</programlisting>
			
			<para>
				<classname>DirectMessageOperations</classname> can also be used to read direct messages received by the authenticating user through its <methodname>getDirectMessagesReceived()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
List<DirectMessage> twitter.directMessageOperations().getDirectMessagesReceived();]]>
			</programlisting>
			
			<para>
				<methodname>getDirectMessagesReceived()</methodname> will return the 20 most recently received direct messages.
			</para>
		
		</section>
	</section>
  
	<section xml:id="section_api_facebook">
		<title>Facebook</title>

		<para>
			Spring Social's <interfacename>Facebook</interfacename> and its implementation, <classname>FacebookTemplate</classname> provide the operations needed to interact with Facebook on behalf of a user.
			Creating an instance of <classname>FacebookTemplate</classname> is as simple as constructing it by passing in an authorized access token to the constructor:
		</para>

		<programlisting language="java"><![CDATA[
String accessToken = "f8FX29g..."; // access token received from Facebook after OAuth authorization
Facebook facebook = new FacebookTemplate(accessToken);]]>
      </programlisting>

		<para>
			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>Facebook</interfacename> via a <interfacename>Connection</interfacename>. 
			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>Facebook</interfacename>:
		</para>				
		
		<programlisting language="java"><![CDATA[
Connection<Facebook> connection = connectionRepository.findPrimaryConnectionToApi(Facebook.class);
Facebook facebook = connection.getApi();]]>
		</programlisting>
		
		<para>
			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Facebook.
			From that connection, it retrieves a <interfacename>Facebook</interfacename> instance that is configured with the connection details received when the connection was first established.
		</para>

		<para>
			With a <interfacename>Facebook</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user.
			Spring Social's Facebook API binding is divided into 9 sub-APIs exposes through the methods of <interfacename>Facebook</interfacename>:
		</para>

			<programlisting language="java"><![CDATA[
public interface Facebook extends GraphApi {

    CommentOperations commentOperations();

    EventOperations eventOperations();
	
    FeedOperations feedOperations();

    FriendOperations friendOperations();
	
    GroupOperations groupOperations();

    LikeOperations likeOperations();
	
    MediaOperations mediaOperations();
	
    PlacesOperations placesOperations();
	
    UserOperations userOperations();
	
}]]>
			</programlisting>

		<para>
			The sub-API interfaces returned from <interfacename>Facebook</interfacename>'s methods are described in <xref linkend="table-facebook-sub-apis" />.
		</para>

		<table xml:id="table-facebook-sub-apis">
			<title>Facebook's Sub-APIs</title>
			<tgroup cols="2">
				<colspec align="left" />
				<colspec colnum="1" colname="col1" colwidth="2*"/>
				<colspec colnum="2" colname="col2" colwidth="2*"/>
				<thead>
					<row>
						<entry align="center">Sub-API Interface</entry>
						<entry align="center">Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>CommentOperations</entry>
						<entry>Add, delete, and read comments on Facebook objects.</entry>
					</row>
					<row>
						<entry>EventOperations</entry>
						<entry>Create and maintain events and RSVP to event invitations.</entry>
					</row>
					<row>
						<entry>FeedOperations</entry>
						<entry>Read and post to a Facebook wall.</entry>
					</row>
					<row>
						<entry>FriendOperations</entry>
						<entry>Retrieve a user's friends and maintain friend lists.</entry>
					</row>
					<row>
						<entry>GroupOperations</entry>
						<entry>Retrieve group details and members.</entry>
					</row>
					<row>
						<entry>LikeOperations</entry>
						<entry>Retrieve a user's interests and likes. Like and unlike objects.</entry>
					</row>
					<row>
						<entry>MediaOperations</entry>
						<entry>Maintain albums, photos, and videos.</entry>
					</row>
					<row>
						<entry>PlacesOperations</entry>
						<entry>Checkin to location in Facebook Places and retrieve places a user and their friends have checked into.</entry>
					</row>
					<row>
						<entry>UserOperations</entry>
						<entry>Retrieve user profile data and profile images.</entry>
					</row>
				</tbody>
			</tgroup>
		</table>

		<para>
			The following sections will give an overview of common tasks that can be performed via <interfacename>Facebook</interfacename> and its sub-APIs.
			For complete details on all of the operations available, refer to the JavaDoc.
		</para>

		<section id="facebook-getProfile">
			<title>Retrieving a user's profile data</title>

			<para>
				You can retrieve a user's Facebook profile data using <interfacename>Facebook</interfacename>' <methodname>getUserProfile()</methodname> method:
			</para>

			<programlisting language="java"><![CDATA[
FacebookProfile profile = facebook.userOperations().getUserProfile();]]>
			</programlisting>

			<para>
				The <classname>FacebookProfile</classname> object will contain basic profile information about the authenticating user, including their first and last name and their Facebook ID.
				Depending on what authorization scope has been granted to the application, it may also include additional details about the user such as their email address, birthday, hometown, and religious and political affiliations.
				For example, <methodname>getBirthday()</methodname> will return the current user's birthday if the application has been granted "user_birthday" permission; null otherwise.
				Consult the JavaDoc for <classname>FacebookProfile</classname> for details on which permissions are required for each property.
			</para>
			
			<para>
				If all you need is the user's Facebook ID, you can call <methodname>getProfileId()</methodname> instead:
			</para>
			
			<programlisting language="java"><![CDATA[
String profileId = facebook.userOperations().getProfileId();]]>
			</programlisting>
			
			<para>
				Or if you want the user's Facebook URL, you can call <methodname>getProfileUrl()</methodname>:
			</para>
			
			<programlisting langauge="java"><![CDATA[
String profileUrl = facebook.userOperations().getProfileUrl();]]>
			</programlisting>

		</section>

		<section id="facebook-friends">
			<title>Getting a user's Facebook friends</title>

			<para>
				An essential feature of Facebook and other social networks is creating a network of friends or contacts. 
				You can access the user's list of Facebook friends by calling the <methodname>getFriendIds()</methodname> method from <interfacename>FriendOperations</interfacename>:
			</para>

			<programlisting language="java"><![CDATA[
List<String> friendIds = facebook.friendOperations().getFriendIds();]]>
			</programlisting>
			
			<para>
				This returns a list of Facebook IDs belonging to the current user's list of friends. 
				This is just a list of <classname>String</classname> IDs, so to retrieve an individual user's profile data, you can turn around and call the <methodname>getUserProfile()</methodname>, passing in one of those IDs to retrieve the profile data for an individual user:
			</para>
			
			<programlisting language="java"><![CDATA[
FacebookProfile firstFriend = facebook.userOperations().getUserProfile(friendIds.get(0));]]>
			</programlisting>
			
			<para>
				Or you can get a list of user's friends as <classname>FacebookProfile</classname>s by calling <methodname>getFriendProfiles()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
List<FacebookProfile> friends = facebook.friendOperations().getFriendProfiles();]]>
			</programlisting>			

			<para>
				Facebook also enables users to organize their friends into friend lists.
				To retrieve a list of the authenticating user's friend lists, call <methodname>getFriendLists()</methodname> with no arguments: 
			</para>

			<programlisting language="java"><![CDATA[
List<Reference> friends = facebook.friendOperations().getFriendLists();]]>
			</programlisting>
			
			<para>
				You can also retrieve a list of friend lists for a specific user by passing the user ID (or an alias) to <methodname>getFriendLists()</methodname>:
			</para>

			<programlisting language="java"><![CDATA[
List<Reference> friends = facebook.friendOperations().getFriendLists("habuma");]]>
			</programlisting>

			<para>
				<methodname>getFriendLists()</methodname> returns a list of <classname>Reference</classname> objects that carry the ID and name of each friend list.
			</para>
			
			<para>
				To retieve a list of friends who are members of a specific friend list call <methodname>getFriendListMembers()</methodname>, passing in the ID of the friend list:
			</para>
			
			<programlisting language="java"><![CDATA[
List<Reference> friends = facebook.friendOperations().getFriendListMembers("193839228");]]>
			</programlisting>
			
			<para>
				<interfacename>FriendOperations</interfacename> also support management of friend lists.
				For example, the <methodname>createFriendList()</methodname> method will create a new friend list for the user:
			</para>
			
			<programlisting language="java"><![CDATA[
Reference collegeFriends = facebook.friendOperations().createFriendList("College Buddies");]]>
			</programlisting>
			
			<para>
				<methodname>createFriendList()</methodname> returns a <classname>Reference</classname> to the newly created friend list.
			</para>
			
			<para>
				To add a friend to the friend list, call <methodname>addToFriendList()</methodname>:
			</para>

			<programlisting language="java"><![CDATA[
facebook.friendOperations().addToFriendList(collegeFriends.getId(), "527631174");]]>
			</programlisting>

			<para>
				<methodname>addToFriendList()</methodname> takes two arguments: The ID of the friend list and the ID (or alias) of a friend to add to the list.
			</para>
			
			<para>
				In a similar fashion, you may remove a friend from a list by calling <methodname>removeFromFriendList()</methodname>:
			</para>

			<programlisting language="java"><![CDATA[
facebook.friendOperations().removeFromFriendList(collegeFriends.getId(), "527631174");]]>
			</programlisting>

		</section>

		<section id="facebook-status">
			<title>Posting to and reading feeds</title>

			<para>
				To post a message to the user's Facebook wall, call <interfacename>FeedOperations</interfacename>' <methodname>updateStatus()</methodname> method, passing in the message to be posted:
			</para>
			
			<programlisting language="java"><![CDATA[
facebook.feedOperations().updateStatus("I'm trying out Spring Social!");]]>
			</programlisting>
			
			<para>
				If you'd like to attach a link to the status message, you can do so by passing in a <classname>FacebookLink</classname> object along with the message:
			</para>
			
			<programlisting language="java"><![CDATA[
FacebookLink link = new FacebookLink("http://www.springsource.org/spring-social", 
        "Spring Social", 
        "The Spring Social Project", 
        "Spring Social is an extension to Spring to enable applications to connect with service providers.");
facebook.feedOperations().updateStatus("I'm trying out Spring Social!", link);]]>
			</programlisting>
			
			<para>
				When constructing the <classname>FacebookLink</classname> object, the first parameter is the link's URL, the second parameter is the name of the link, the third parameter is a caption, and the fourth is a description of the link.
			</para>
			
			<para>
				If you want to read posts from a user's feed, <interfacename>FeedOperations</interfacename> has several methods to choose from.
				The <methodname>getFeed()</methodname> method retrieves recent posts to a user's wall.
				When called with no parameters, it retrieves posts from the authenticating user's wall:
			</para>
			
			<programlisting language="java"><![CDATA[
List<Post> feed = facebook.feedOperations().getFeed();]]>
			</programlisting>
			
			<para>
				Or you can read a specific user's wall by passing their Facebook ID to <methodname>getFeed()</methodname>:
			</para>			

			<programlisting language="java"><![CDATA[
List<Post> feed = facebook.feedOperations().getFeed("habuma");]]>
			</programlisting>

			<para>
				In any event, the <methodname>getFeed()</methodname> method returns a list of <classname>Post</classname> objects.
				The <classname>Post</classname> class has six subtypes to represent different kinds of posts:
			</para>
			
			<itemizedlist>
				<listitem><para><classname>CheckinPost</classname> - Reports a user's checkin in Facebook Places.</para></listitem>
				<listitem><para><classname>LinkPost</classname> - Shares a link the user has posted.</para></listitem>
				<listitem><para><classname>NotePost</classname> - Publicizes a note that the user has written.</para></listitem>
				<listitem><para><classname>PhotoPost</classname> - Announces a photo that the user has uploaded.</para></listitem>
				<listitem><para><classname>StatusPost</classname> - A simple status.</para></listitem>
				<listitem><para><classname>VideoPost</classname> - Announces a video that the user has uploaded.</para></listitem>
			</itemizedlist>
			
			<para>
				The <classname>Post</classname>'s <methodname>getType()</methodname> method identifies the type of <classname>Post</classname>.
			</para>			
		</section>		
	</section>

	<section xml:id="section_api_linkedin">
		<title>LinkedIn</title>
        
		<para>
			LinkedIn is a social networking site geared toward professionals. 
			It enables its users to maintain and correspond with a network of contacts they have are professionally linked to.
		</para>
		
		<para>
			Spring Social offers integration with LinkedIn via <interfacename>LinkedIn</interfacename> and its implementation, <classname>LinkedInTemplate</classname>.
		</para>
		
		<para>
			To create an instance of <classname>LinkedInTemplate</classname>, you may pass in your application's OAuth 1 credentials, along with an access token/secret pair to the constructor:
		</para>
		
		<programlisting language="java"><![CDATA[
String consumerKey = "..."; // The application's consumer key
String consumerSecret = "..."; // The application's consumer secret
String accessToken = "..."; // The access token granted after OAuth authorization
String accessTokenSecret = "..."; // The access token secret granted after OAuth authorization
LinkedIn linkedin = new LinkedInTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>
		</programlisting>
		
		<para>
			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>LinkedIn</interfacename> via a <interfacename>Connection</interfacename>. 
			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>LinkedIn</interfacename>:
		</para>				
		
		<programlisting language="java"><![CDATA[
Connection<LinkedIn> connection = connectionRepository.findPrimaryConnectionToApi(LinkedIn.class);
LinkedIn linkedin = connection.getApi();]]>
		</programlisting>
		
		<para>
			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with LinkedIn.
			From that connection, it retrieves a <interfacename>LinkedIn</interfacename> instance that is configured with the connection details received when the connection was first established.
		</para>
		
		<para>
			Once you have a <interfacename>LinkedIn</interfacename> you can use it to interact with LinkedIn on behalf of the user who the access token was granted for.
		</para>

		<section id="linkedin-getProfile">
			<title>Retrieving a user's LinkedIn profile data</title>
			
			<para>
				To retrieve the authenticated user's profile data, call the <methodname>getUserProfile()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
LinkedInProfile profile = linkedin.getUserProfile();]]>
			</programlisting>
			
			<para>
				The data returned in the <classname>LinkedInProfile</classname> includes the user's LinkedIn ID, first and last names, their "headline", the industry they're in, and URLs for the public and standard profile pages.
			</para>
			
			<para>
				If it's only the user's LinkedIn ID you need, then you can get that by calling the <methodname>getProfileId()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
String profileId = linkedin.getProfileId();]]>
			</programlisting>
			
			<para>
				Or if you only need a URL for the user's public profile page, call <methodname>getProfileUrl()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
String profileUrl = linkedin.getProfileUrl();]]>
			</programlisting>

		</section>

		<section id="linkedin-connections">
			<title>Getting a user's LinkedIn connections</title>
			
			<para>
				To retrieve a list of LinkedIn users to whom the user is connected, call the <methodname>getConnections()</methodname> method:
			</para>
			
			<programlisting><![CDATA[
List<LinkedInProfile> connections = linkedin.getConnections();]]>
			</programlisting>
			
			<para>
				This will return a list of <classname>LinkedInProfile</classname> objects for the user's 1st-degree network (those LinkedIn users to whom the user is directly linked--not their extended network).
			</para>

		</section>
	</section>
	<section xml:id="section_api_tripit">
		<title>TripIt</title>
        
		<para>
			TripIt is a social network that links together travelers. 
			By connecting with other travelers, you can keep in touch with contacts when your travel plans coincide. 
			Also, aside from its social aspects, TripIt is a rather useful service for managing one's travel information.
		</para>
		
		<para>
			Using Spring Social's <interfacename>TripIt</interfacename> and its implementation, <classname>TripItTemplate</classname>, you can develop applications that integrate a user's travel information and network.
		</para>
		
		<para>
			To create an instance of <classname>TripItTemplate</classname>, pass in your application's OAuth 1 credentials along with a user's access token/secret pair to the constructor:
		</para>
		
		<programlisting language="java"><![CDATA[
String consumerKey = "..."; // The application's consumer key
String consumerSecret = "..."; // The application's consumer secret
String accessToken = "..."; // The access token granted after OAuth authorization
String accessTokenSecret = "..."; // The access token secret granted after OAuth authorization
TripIt tripit = new TripItTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>
		</programlisting>
		
		<para>
			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TripIt</interfacename> via a <interfacename>Connection</interfacename>. 
			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TripIt</interfacename>:
		</para>				
		
		<programlisting language="java"><![CDATA[
Connection<TripIt> connection = connectionRepository.findPrimaryConnectionToApi(TripIt.class);
TripIt tripit = connection.getApi();]]>
		</programlisting>
		
		<para>
			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with TripIt.
			From that connection, it retrieves a <interfacename>TripIt</interfacename> instance that is configured with the connection details received when the connection was first established.
		</para>
				
		<para>
			In either event, once you have a <interfacename>TripIt</interfacename>, you can use it to retrieve a user's profile and travel data from TripIt.
		</para>

		<section id="tripit-getProfile">
			<title>Retrieving a user's TripIt profile data</title>
			
			<para>
				<interfacename>TripIt</interfacename>' <methodname>getUserProfile()</methodname> method is useful for retrieving the authenticated user's TripIt profile data. 
				For example:
			</para>
			
			<programlisting language="java"><![CDATA[
TripItProfile userProfile = tripit.getUserProfile();]]>
			</programlisting>
			
			<para>
				<methodname>getUserProfile()</methodname> returns a <classname>TripItProfile</classname> object that carries details about the user from TripIt. 
				This includes the user's screen name, their display name, their home city, and their company.
			</para>
			
			<para>
				If all you need is the user's TripIt screen name, you can get that by calling <methodname>getProfileId()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
String profileId = tripit.getProfileId();]]>
			</programlisting>
			
			<para>
				Or if you only need a URL to the user's TripIt profile page, then call <methodname>getProfileUrl()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
String profileUrl = tripit.getProfileUrl();]]>
			</programlisting>
			
		</section>

		<section id="tripit-trips">
			<title>Getting a user's upcoming trips</title>
			
			<para>
				If the user has any upcoming trips planned, your application can access the trip information by calling <methodname>getUpcomingTrips()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
List<Trip> trips = tripit.getUpcomingTrips();]]>
			</programlisting>
			
			<para>
				This returns a list of <classname>Trip</classname> objects containing details about each trip, such as the start and end dates for the trip, the primary location, and the trip's display name.
			</para>
		</section>
	</section>  	
	
	<section xml:id="section_api_github">
		<title>GitHub</title>
		
		<para>
			Although many developers think of GitHub as Git-based source code hosting, the tagline in GitHub's logo clearly states that GitHub is about "social coding". 
			GitHub is a social network that links developers together and with the projects they follow and/or contribute to.
		</para>
		
		<para>
			Spring Social's <interfacename>GitHub</interfacename> and its implementation, <classname>GitHubTemplate</classname>, offer integration with GitHub's social platform.
		</para>
		
		<para>
			To obtain an instance of <classname>GitHubTemplate</classname>, you can instantiate it by passing an authorized access token to its constructor:
		</para>
		
		<programlisting language="java"><![CDATA[
String accessToken = "f8FX29g..."; // access token received from GitHub after OAuth authorization
GitHub github = new GitHubTemplate(accessToken);]]>
		</programlisting>
		
		<para>
			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>GitHub</interfacename> via a <interfacename>Connection</interfacename>. 
			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>GitHub</interfacename>:
		</para>				
		
		<programlisting language="java"><![CDATA[
Connection<GitHub> connection = connectionRepository.findPrimaryConnectionToApi(GitHub.class);
GitHub github = connection.getApi();]]>
		</programlisting>
		
		<para>
			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with GitHub.
			From that connection, it retrieves a <interfacename>GitHub</interfacename> instance that is configured with the connection details received when the connection was first established.
		</para>
		
		<para>
			With a <interfacename>GitHub</interfacename> in hand, there are a handful of operations it provides to interact with GitHub on behalf of the user. 
			These will be covered in the following sections.
		</para>

		<section id="github-profile">
			<title>Retrieving a GitHub user's profile</title>

			<para>
				To get the currently authenticated user's GitHub profile data, call <interfacename>GitHub</interfacename>'s <methodname>getUserProfile()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
GitHubUserProfile profile = github.getUserProfile();]]>
			</programlisting>
			
			<para>
				The <classname>GitHubUserProfile</classname> returned from <methodname>getUserProfile()</methodname> includes several useful pieces of information about the user, including their...
			</para>
			
			<itemizedlist>
				<listitem><para>Name</para></listitem>
				<listitem><para>Username (ie, login name)</para></listitem>
				<listitem><para>Company</para></listitem>
				<listitem><para>Email address</para></listitem>
				<listitem><para>Location</para></listitem>
				<listitem><para>Blog URL</para></listitem>
				<listitem><para>Date they joined GitHub</para></listitem>
			</itemizedlist>
			
			<para>
				If all you need is the user's GitHub username, you can get that by calling the <methodname>getProfileId()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
String username = github.getProfileId();]]>
			</programlisting>
			
			<para>
				And if you need a URL to the user's GitHub profile page, you can use the <methodname>getProfileUrl()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
String profileUrl = github.getProfileUrl();]]>
			</programlisting>
	
		</section>
	</section>

	<section xml:id="section_api_gowalla">
		<title>Gowalla</title>
		
		<para>
			Gowalla is a location-based social network where users may check in to various locations they visit and earn pins and stamps for having checked in a locations that achieve some goal (for example, a "Lucha Libre" pin may be earned by having checked into 10 different Mexican food restaurants).
		</para>
		
		<para>
			Spring Social supports interaction with Gowalla through the <interfacename>Gowalla</interfacename> interface and its implementation, <classname>GowallaTemplate</classname>.
		</para>
		
		<para>
			To obtain an instance of <classname>GowallaTemplate</classname>, you can instantiate it by passing an authorized access token to its constructor:
		</para>
		
		<programlisting language="java"><![CDATA[
String accessToken = "f8FX29g..."; // access token received from Gowalla after OAuth authorization
Gowalla gowalla = new GowallaTemplate(accessToken);]]>
		</programlisting>
		
		<para>
			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>Gowalla</interfacename> via a <interfacename>Connection</interfacename>. 
			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>Gowalla</interfacename>:
		</para>				
		
		<programlisting language="java"><![CDATA[
Connection<Gowalla> connection = connectionRepository.findPrimaryConnectionToApi(Gowalla.class);
Gowalla gowalla = connection.getApi();]]>
		</programlisting>
		
		<para>
			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Gowalla.
			From that connection, it retrieves a <interfacename>Gowalla</interfacename> instance that is configured with the connection details received when the connection was first established.
		</para>
		
		<para>
			With a <interfacename>Gowalla</interfacename> in hand, there are a handful of operations it provides to interact with Gowalla on behalf of the user. 
			These will be covered in the following sections.
		</para>

		<section id="gowalla-getProfile">
			<title>Retrieving a user's profile data</title>
			
			<para>
				You can retrieve a user's Gowalla profile using the <methodname>getUserProfile()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
GowallaProfile profile = gowalla.getUserProfile();]]>
			</programlisting>
			
			<para>
				This will return the Gowalla profile data for the authenticated user. 
				If you want to retrieve profile data for another user, you can pass the user's profile ID into <methodname>getUserProfile()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
GowallaProfile profile = gowalla.getUserProfile("habuma");]]>
			</programlisting>
			
			<para>
				The <classname>GowallaProfile</classname> object contains basic information about the Gowalla user such as their first and last names, their hometown, and the number of pins and stamps that they have earned.
			</para>
			
			<para>
				If all you want is the authenticated user's profile ID, you can get that by calling the <methodname>getProfileId()</methodname>:
			</para>
			
			<programlisting language="java"><![CDATA[
String profileId = gowalla.getProfileId();]]>
			</programlisting>
			
			<para>
				Or if you want the URL to the user's profile page at Gowalla, use the <methodname>getProfileUrl()</methodname> method:
			</para>
			
			<programlisting language="java"><![CDATA[
String profileUrl = gowalla.getProfileUrl();]]>
			</programlisting>

		</section>

		<section id="gowalla-checkins">
			<title>Getting a user's checkins</title>
			
			<para>
				<interfacename>Gowalla</interfacename> also allows you to learn about the user's favorite checkin spots. 
				The <methodname>getTopCheckins()</methodname> method will provide a list of the top 10 places that the user has visited:
			</para>
			
			<programlisting language="java"><![CDATA[
List<Checkin> topCheckins = gowalla.getTopCheckins();]]>
			</programlisting>
			
			<para>
				Each member of the returns list is a <classname>Checkin</classname> object that includes the name of the location as well as the number of times that the user has checked in at that location.
			</para>
		</section>
	</section>
</chapter>